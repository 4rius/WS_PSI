digraph "classes" {
rankdir=BT
charset="utf-8"
"flaskr.handlers.CSHandler.CSHandler" [color="black", fontcolor="black", label=<{CSHandler|<br ALIGN="LEFT"/>|<I>decrypt</I>(ciphertext)<br ALIGN="LEFT"/><I>encrypt</I>(plaintext)<br ALIGN="LEFT"/><I>encrypt_my_data</I>(my_set, domain)<br ALIGN="LEFT"/><I>eval_coefficients</I>(coeffs, pubkey, my_data)<br ALIGN="LEFT"/><I>generate_keys</I>()<br ALIGN="LEFT"/><I>get_ciphertext</I>(encrypted_number)<br ALIGN="LEFT"/><I>get_encrypted_list</I>(serialized_encrypted_list, public_key)<br ALIGN="LEFT"/><I>get_encrypted_list_f</I>(serialized_encrypted_list)<br ALIGN="LEFT"/><I>get_encrypted_set</I>(serialized_encrypted_set, public_key)<br ALIGN="LEFT"/><I>get_evaluations</I>(coeffs, pubkey, my_data)<br ALIGN="LEFT"/><I>get_multiplied_set</I>(enc_set, node_set)<br ALIGN="LEFT"/><I>horner_encrypted_eval</I>(coeffs, x)<br ALIGN="LEFT"/><I>intersection_enc_size</I>(multiplied_set)<br ALIGN="LEFT"/><I>multiply_encrypted_sets</I>(encrypted_set1, encrypted_set2)<br ALIGN="LEFT"/><I>reconstruct_public_key</I>(public_key_dict)<br ALIGN="LEFT"/><I>recv_multiplied_set</I>(serialized_multiplied_set, public_key)<br ALIGN="LEFT"/><I>serialize_public_key</I>()<br ALIGN="LEFT"/><I>serialize_result</I>(result, type)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"flaskr.helpers.CryptoImplementation.CryptoImplementation" [color="black", fontcolor="black", label=<{CryptoImplementation|entries : dict<br ALIGN="LEFT"/>|from_string(text)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"flaskr.handlers.DamgardJurikHandler.DamgardJurikHandler" [color="black", fontcolor="black", label=<{DamgardJurikHandler|imp_name : str<br ALIGN="LEFT"/>private_key_ring : NoneType<br ALIGN="LEFT"/>public_key : NoneType<br ALIGN="LEFT"/>|decrypt(number)<br ALIGN="LEFT"/>encrypt(number)<br ALIGN="LEFT"/>encrypt_my_data(my_set, domain)<br ALIGN="LEFT"/>eval_coefficients(coefs, pubkey, my_data)<br ALIGN="LEFT"/>generate_keys()<br ALIGN="LEFT"/>get_ciphertext(encrypted_number)<br ALIGN="LEFT"/>get_encrypted_list(serialized_encrypted_list, public_key)<br ALIGN="LEFT"/>get_encrypted_list_f(serialized_encrypted_list)<br ALIGN="LEFT"/>get_encrypted_set(serialized_encrypted_set, public_key)<br ALIGN="LEFT"/>get_evaluations(coefs, pubkey, my_data)<br ALIGN="LEFT"/>get_multiplied_set(enc_set, node_set)<br ALIGN="LEFT"/>horner_encrypted_eval(coefs, x)<br ALIGN="LEFT"/>intersection_enc_size(multiplied_set)<br ALIGN="LEFT"/>reconstruct_public_key(public_key_dict)<br ALIGN="LEFT"/>recv_multiplied_set(serialized_multiplied_set, public_key)<br ALIGN="LEFT"/>serialize_public_key()<br ALIGN="LEFT"/>serialize_result(result, type)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"flaskr.handlers.IntersectionHandler.IntersectionHandler" [color="black", fontcolor="black", label=<{IntersectionHandler|damgardJurikHandler<br ALIGN="LEFT"/>devices<br ALIGN="LEFT"/>domain<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>my_data<br ALIGN="LEFT"/>paillierHandler<br ALIGN="LEFT"/>results<br ALIGN="LEFT"/>|final_step_psi_ca_ope(device, cs, peer_data)<br ALIGN="LEFT"/>intersection_final_step(device, cs, peer_data)<br ALIGN="LEFT"/>intersection_final_step_ope(device, cs, peer_data)<br ALIGN="LEFT"/>intersection_first_step(device, cs)<br ALIGN="LEFT"/>intersection_first_step_ope(device, cs, type)<br ALIGN="LEFT"/>intersection_second_step(device, cs, peer_data, pubkey)<br ALIGN="LEFT"/>intersection_second_step_ope(device, cs, coeffs, pubkey)<br ALIGN="LEFT"/>intersection_second_step_psi_ca_ope(device, cs, coeffs, pubkey)<br ALIGN="LEFT"/>send_message(peer, ser_enc_res, implementation, peer_pubkey)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"flaskr.Node.Node" [color="black", fontcolor="black", label=<{Node|context<br ALIGN="LEFT"/>devices : dict<br ALIGN="LEFT"/>domain : int<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>myData : set<br ALIGN="LEFT"/>peers<br ALIGN="LEFT"/>port<br ALIGN="LEFT"/>results : dict<br ALIGN="LEFT"/>router_socket<br ALIGN="LEFT"/>running : bool<br ALIGN="LEFT"/>scheme_handler<br ALIGN="LEFT"/>|broadcast_message(message)<br ALIGN="LEFT"/>connect_to_peers()<br ALIGN="LEFT"/>discover_peers()<br ALIGN="LEFT"/>genkeys(scheme)<br ALIGN="LEFT"/>get_devices()<br ALIGN="LEFT"/>getinstance()<br ALIGN="LEFT"/>handle_added(message, day_time)<br ALIGN="LEFT"/>handle_discover(message, day_time)<br ALIGN="LEFT"/>handle_discover_ack(message, day_time)<br ALIGN="LEFT"/>handle_message(sender, message, day_time)<br ALIGN="LEFT"/>handle_ping(sender, message, day_time)<br ALIGN="LEFT"/>handle_unknown(message, day_time)<br ALIGN="LEFT"/>launch_test(device)<br ALIGN="LEFT"/>new_peer(peer, last_seen)<br ALIGN="LEFT"/>ping_device(device)<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>start_intersection(device, scheme, type)<br ALIGN="LEFT"/>start_router_socket()<br ALIGN="LEFT"/>stop()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"flaskr.handlers.PaillierHandler.PaillierHandler" [color="black", fontcolor="black", label=<{PaillierHandler|imp_name : str<br ALIGN="LEFT"/>private_key : NoneType<br ALIGN="LEFT"/>public_key : NoneType<br ALIGN="LEFT"/>|decrypt(encrypted_number)<br ALIGN="LEFT"/>encrypt(number)<br ALIGN="LEFT"/>encrypt_my_data(my_set, domain)<br ALIGN="LEFT"/>eval_coefficients(coeffs, pubkey, my_data)<br ALIGN="LEFT"/>generate_keys()<br ALIGN="LEFT"/>get_ciphertext(encrypted_number)<br ALIGN="LEFT"/>get_encrypted_list(serialized_encrypted_list, public_key)<br ALIGN="LEFT"/>get_encrypted_list_f(serialized_encrypted_list)<br ALIGN="LEFT"/>get_encrypted_set(serialized_encrypted_set, public_key)<br ALIGN="LEFT"/>get_evaluations(coeffs, pubkey, my_data)<br ALIGN="LEFT"/>get_multiplied_set(enc_set, node_set)<br ALIGN="LEFT"/>horner_encrypted_eval(coeffs, x)<br ALIGN="LEFT"/>intersection_enc_size(multiplied_set)<br ALIGN="LEFT"/>reconstruct_public_key(public_key_dict)<br ALIGN="LEFT"/>recv_multiplied_set(serialized_multiplied_set, public_key)<br ALIGN="LEFT"/>serialize_public_key()<br ALIGN="LEFT"/>serialize_result(result, type)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"flaskr.handlers.SchemeHandler.SchemeHandler" [color="black", fontcolor="black", label=<{SchemeHandler|CSHandlers : dict<br ALIGN="LEFT"/>devices<br ALIGN="LEFT"/>executor : ThreadPoolExecutor<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>intersectionHandler<br ALIGN="LEFT"/>|genkeys(cs)<br ALIGN="LEFT"/>handle_intersection_final_step(message)<br ALIGN="LEFT"/>handle_intersection_second_step(message)<br ALIGN="LEFT"/>handle_message(message)<br ALIGN="LEFT"/>start_intersection(device, scheme, type)<br ALIGN="LEFT"/>test_launcher(device)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"flaskr.Logs.ThreadData" [color="black", fontcolor="black", label=<{ThreadData|avg_cpu_usage : int<br ALIGN="LEFT"/>avg_instance_cpu_usage : int<br ALIGN="LEFT"/>avg_instance_ram_usage : int<br ALIGN="LEFT"/>avg_ram_usage : int<br ALIGN="LEFT"/>cpu_usage : list<br ALIGN="LEFT"/>instance_cpu_usage : list<br ALIGN="LEFT"/>instance_ram_usage : list<br ALIGN="LEFT"/>peak_cpu_usage : int<br ALIGN="LEFT"/>peak_instance_cpu_usage : int<br ALIGN="LEFT"/>peak_instance_ram_usage : int<br ALIGN="LEFT"/>peak_ram_usage : int<br ALIGN="LEFT"/>ram_usage : list<br ALIGN="LEFT"/>stop_event : Event<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"flaskr.handlers.DamgardJurikHandler.DamgardJurikHandler" -> "flaskr.handlers.CSHandler.CSHandler" [arrowhead="empty", arrowtail="none"];
"flaskr.handlers.PaillierHandler.PaillierHandler" -> "flaskr.handlers.CSHandler.CSHandler" [arrowhead="empty", arrowtail="none"];
"flaskr.handlers.DamgardJurikHandler.DamgardJurikHandler" -> "flaskr.handlers.IntersectionHandler.IntersectionHandler" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="damgardJurikHandler", style="solid"];
"flaskr.handlers.IntersectionHandler.IntersectionHandler" -> "flaskr.handlers.SchemeHandler.SchemeHandler" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="intersectionHandler", style="solid"];
"flaskr.handlers.PaillierHandler.PaillierHandler" -> "flaskr.handlers.IntersectionHandler.IntersectionHandler" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="paillierHandler", style="solid"];
"flaskr.handlers.SchemeHandler.SchemeHandler" -> "flaskr.Node.Node" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="scheme_handler", style="solid"];
}
