{
	"info": {
		"_postman_id": "1327128f-8330-4132-8cb4-3cf8a46280c8",
		"name": "PSI Suite",
		"description": "The collection of API endpoints available on the Flask Python app.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25834704"
	},
	"item": [
		{
			"name": "Update setup",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.status).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Status field is not empty\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.status).to.exist.and.to.not.be.empty;",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/setup?domain=500&set_size=100",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"setup"
					],
					"query": [
						{
							"key": "domain",
							"value": "500",
							"description": "New value of the domain (only intended for PSI-Domain intersections)"
						},
						{
							"key": "set_size",
							"value": "100",
							"description": "New value of the set (must always be lower than the domain)"
						}
					]
				},
				"description": "This API endpoint is a POST request to the /api/setup path with query parameters domain and set_size. The request is used to set up new values or \"private data\" on the node.\n\n### Response\n\nUpon successful execution, the API returns a 200 status code with a JSON response in the content type. The response body includes a status field."
			},
			"response": []
		},
		{
			"name": "Connect",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required Content-Type header with value application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Status field is present in the response\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.have.property('status');",
							"});",
							"",
							"",
							"pm.test(\"Status field is not empty\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.status).to.exist.and.to.not.equal(\"\");",
							"});",
							"",
							"",
							"pm.test(\"Status field is a valid value as per the API documentation\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.status).to.exist.and.to.be.a('string');",
							"  // Add additional checks for specific valid values based on API documentation",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/connect?port",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"connect"
					],
					"query": [
						{
							"key": "port",
							"value": null,
							"description": "A new port for the node to listen on can be specifided here"
						}
					]
				},
				"description": "This endpoint allows you to make an HTTP POST request to /api/connect in order to spin up a new node. The request can include an optional port parameter if the user wants the new node to be listening in another port.\n\nUpon successful execution, the API returns a JSON response with a status key indicating the status of the connection.\n\nExample:\n\n``` json\n{\n    \"status\": \"\"\n}\n\n ```"
			},
			"response": []
		},
		{
			"name": "Disconnect",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response).to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.status).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Status is not empty\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.status).to.exist.and.to.not.be.empty;",
							"});",
							"",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/disconnect",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"disconnect"
					]
				},
				"description": "This HTTP POST request is used to disconnect from the decentralized network, destroy the node. Upon successful execution, the response will have a status code of 200 and a JSON body with a \"status\" field indicating the result of the node destruction process."
			},
			"response": []
		},
		{
			"name": "Dataset",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required Content-Type header with value 'application/json'\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Dataset is an array with at least one element\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.dataset).to.be.an('array').and.to.have.lengthOf.at.least(1);",
							"});",
							"",
							"",
							"pm.test(\"Dataset array is present in the response\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.dataset).to.exist.and.to.be.an('array');",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/dataset",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"dataset"
					]
				},
				"description": "This endpoint makes an HTTP GET request to retrieve the dataset. The response will have a status code of 200 and a content type of application/json. The response body will contain an array of dataset items."
			},
			"response": []
		},
		{
			"name": "Check connection",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/check_connection",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"check_connection"
					]
				},
				"description": "This endpoint is used to check the connection of the node. It sends an HTTP GET request to [http://127.0.0.1:5000//api/check_connection](http://127.0.0.1:5000//api/check_connection) and returns a JSON response with a status field.\n\n### Response\n\n- Status: 200\n- Content-Type: application/json"
			},
			"response": []
		},
		{
			"name": "Devices",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.to.have.status(200));",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"});",
							"",
							"",
							"pm.test(\"Response is in JSON format\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/devices",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"devices"
					]
				},
				"description": "This endpoint makes an HTTP GET request to retrieve a list of devices from the API. The response will be in JSON format and will contain the list of devices along with their corresponding details.\n\nFor example, the last execution returned a status code of 200 with a JSON response containing the devices and their details. The devices are represented by their IP addresses as keys, and the corresponding values contain the last time the device interacted with the node.\n\nIt is recommended to handle the response data dynamically based on the available keys and values to effectively utilize the device information."
			},
			"response": []
		},
		{
			"name": "Port",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/port",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"port"
					]
				},
				"description": "This endpoint makes an HTTP GET request to retrieve the port information. The response will be in JSON format with a key \"port\" indicating the port number."
			},
			"response": []
		},
		{
			"name": "Ping device",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.status).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Status is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Device parameter is present in the request URL\", function () {",
							"    pm.expect(pm.request.url.toString()).to.include(\"{{Device}}\");",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{base_url}}/api/ping/{{Device}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"ping",
						"{{Device}}"
					]
				},
				"description": "This endpoint allows you to send an HTTP POST request to ping a specific device. The request should be sent to /api/ping/_DeviceIP_. Upon successful execution, the server will respond with a status code of 200 and a JSON object in the response body with a \"status\" key."
			},
			"response": []
		},
		{
			"name": "Initiate intersection",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.to.have.status(200));",
							"});",
							"",
							"",
							"pm.test(\"Response has the required field 'status'\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.status).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Status field is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Status should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"device\": \"192.168.1.135\",\n    \"scheme\": \"DamgardJurik\",\n    \"type\": \"OPE\",\n    \"rounds\": 10\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/intersection",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"intersection"
					]
				},
				"description": "This endpoint is used to make an HTTP POST request [/api/intersection](http://127.0.0.1:5000//api/intersection) in order to retrieve launch the intersection process between this node and a peer The request should include a JSON payload in the raw request body type with keys \"device\", \"scheme\", \"type\", and \"rounds\". The last execution of this request returned a JSON response with a status code of 200 and a content type of application/json. The response body included a key \"status\" with a corresponding value."
			},
			"response": []
		},
		{
			"name": "Keygen",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.status).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Status field should not be empty\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.status).to.exist.and.to.not.be.empty;",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/genkeys?scheme=Paillier&bit_length=4096",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"genkeys"
					],
					"query": [
						{
							"key": "scheme",
							"value": "Paillier",
							"description": "The available schemes that are configured in the program"
						},
						{
							"key": "bit_length",
							"value": "4096",
							"description": "The desired bit length for the new keys"
						}
					]
				},
				"description": "This endpoint is used to generate encryption keys based on the specified scheme and bit length. The HTTP POST request should be sent to /api/genkeys with the query parameters scheme (e.g. Paillier) and bit_length (e.g. 4096).\n\nUpon successful execution, the endpoint returns a JSON response with a status field indicating the status of the key generation process.\n\nExample:\n\n``` json\n{\n    \"status\": \"\"\n}\n\n ```"
			},
			"response": []
		},
		{
			"name": "Discover peers LAN",
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/discover_peers",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"discover_peers"
					]
				},
				"description": "This endpoint allows users to send an HTTP POST request to /api/discover_peers in order to discover peers in a LAN network (ranges 192.168.1.1-192.168.1.255). The request should be in JSON format. Upon successful execution, the API returns a JSON response with a status field.\n\n### Response\n\n- Status: 200\n- Content-Type: application/json\n- Body:\n    \n    ``` json\n    {\n        \"status\": \"\"\n    }\n    \n     ```"
			},
			"response": []
		},
		{
			"name": "Tasks",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required Content-Type header with value application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Status array is present in the response\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.status).to.exist.and.to.be.an('array');",
							"});",
							"",
							"",
							"pm.test(\"Status array must contain at least one element\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.status).to.be.an('array').that.is.not.empty;",
							"});",
							"",
							"",
							"pm.test(\"Each element in the status array is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.status).to.be.an('array');",
							"    ",
							"    responseData.status.forEach(function(status) {",
							"        pm.expect(status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"    });",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/tasks",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"tasks"
					]
				},
				"description": "This endpoint makes an HTTP GET request to retrieve a list of tasks running on the node The response will have a status code of 200, indicating a successful request, and the content type will be in JSON format. The response body will contain a \"status\" key with an array of task items, the first position will indicate the tasks running on the node, and the second on the handler.."
			},
			"response": []
		},
		{
			"name": "Firebase",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/firebase",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"firebase"
					]
				},
				"description": "This endpoint makes an HTTP GET request to retrieve data from the status of the Firebase app.\n\n### Response\n\n- Status: 200\n- Content Type: application/json\n    \n\nThe response will contain a JSON object with a \"status\" field."
			},
			"response": []
		},
		{
			"name": "Firebase connect/disconnect",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required field - status\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.status).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Status is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Status should be a non-empty string\");",
							"});",
							"",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/firebase?action=connect",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"firebase"
					],
					"query": [
						{
							"key": "action",
							"value": "connect",
							"description": "connect / disconnect, self-explanatory"
						}
					]
				},
				"description": "This endpoint is used to initiate a connection to Firebase. Upon successful execution, it returns a JSON response with a status field.\n\nThe request should be a POST method to the specified URL with the action parameter set to \"connect\" or \"disconnect\".\n\nThe response will have a status code of 200 and a content type of application/json. The response body will contain a status field indicating the result of the connection initiation."
			},
			"response": []
		},
		{
			"name": "Identification",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/id",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"id"
					]
				},
				"description": "This endpoint makes an HTTP GET request to retrieve the id of the running node.\n\n### Response\n\n- Status: 200\n- Content-Type: application/json"
			},
			"response": []
		},
		{
			"name": "My keys",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Each pubkey is in a valid format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    ",
							"    Object.keys(responseData).forEach(key => {",
							"        pm.expect(responseData[key]).to.be.a('string');",
							"        pm.expect(responseData[key]).to.match(/^[\\w\\d]+$/);",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is within an acceptable range\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/mykeys",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"mykeys"
					]
				},
				"description": "This endpoint makes an HTTP GET request to retrieve the public keys from the running node. The response will be in JSON format with the status code 200. The response body will contain public keys for different algorithms."
			},
			"response": []
		},
		{
			"name": "Results",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/results",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"results"
					]
				},
				"description": "This endpoint makes an HTTP GET request to retrieve the saved intersection results. The response returns a status code of 200 and the content type is application/json. The response body contains a result object with specific key-value pairs."
			},
			"response": []
		},
		{
			"name": "Add a new peer",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.status).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Status is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Status should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Peer parameter is present in the request URL\", function () {",
							"    const requestUrl = pm.request.url.toString();",
							"    pm.expect(requestUrl).to.include(\"peer=\");",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/add?peer={{Device}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"add"
					],
					"query": [
						{
							"key": "peer",
							"value": "{{Device}}"
						}
					]
				},
				"description": "This endpoint allows you to make an HTTP PUT request to add a peer with the specified IP address. The request should be made to /api/add with the 'peer' query parameter set to the IP address.\n\n### Request Parameters\n\n- peer: The IP address of the peer to be added.\n    \n\n### Response\n\nUpon a successful execution, the server will respond with a status code of 200 and a JSON object in the response body. The JSON object will contain a 'status' field indicating the status of the operation. Invalid values will result in different status messages\n\nExample:\n\n``` json\n{\n    \"status\": \"\"\n}\n\n ```"
			},
			"response": []
		},
		{
			"name": "Logs",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/logs?device=192.168.1.135",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"logs"
					],
					"query": [
						{
							"key": "device",
							"value": "192.168.1.135"
						}
					]
				},
				"description": "This endpoint makes an HTTP GET request to retrieve the logs of either the currently running device, or a specified device. It contacts the Firebase RTDB for the information. The app has to be run with a valid authorization to be able to perform this task."
			},
			"response": []
		},
		{
			"name": "Launch mixed test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required Content-Type header with value application/json\", function () {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
							"});",
							"",
							"",
							"pm.test(\"Response body contains the required field 'status'\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.have.property('status');",
							"});",
							"",
							"",
							"pm.test(\"Status field is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Status should not be empty\");",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/test?device={{Device}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"test"
					],
					"query": [
						{
							"key": "device",
							"value": "{{Device}}"
						}
					]
				},
				"description": "This endpoint allows you to make an HTTP POST request to the specified URL with the query parameter \"device\" to launch a mixed test against.\n\n### Request Parameters\n\n- `device` (query parameter) - The device you want to test against.\n    \n\n### Response\n\nUpon a successful execution, the endpoint returns a JSON object with a status code of 200 and a content type of \"application/json\". The response body includes a \"status\" field."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://127.0.0.1:5000/",
			"type": "string"
		},
		{
			"key": "Device",
			"value": "192.168.1.135"
		}
	]
}